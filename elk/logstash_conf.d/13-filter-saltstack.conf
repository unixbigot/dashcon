filter {

	#
	# Events from systems and application servers come via the SaltStack event bus
	# and are tagged as such by the input rules.
	#
	if [@metadata][type] == "salt-event" {

		if [message] == "salt/auth" {
			# Ignore device logins, which can be frequent if there is an unauthorised device awaiting acceptance
			drop {}
		}

		# 
		# Notifications from the vehicular traffic monitoring application
		#
		if [message] =~ "traffic\/spot" {
			# Move all the fields in the data[] sub dictionary into the top level
			ruby {
				code => "
					event.get('data').each {|k, v|
						event.set(k, v)
					}
					event.remove('data')
				"
		    }
			mutate {
				replace => { "[@metadata][beat]" => "traffic" }
				remove_field => ["cmd", "tag", "type", 
							 "__pub_fun", "__pub_jid", "__pub_pid", "__pub_tgt"]
				rename => { "[geoip][location]" => "location" }
			}
		}

		# Treat the _stamp field as the event timestamp
		date {
			match => ["_stamp", "yyyy-MM-dd'T'hh:mm:ss.SSS", "ISO8601"]
			remove_field => [ "_stamp" ]
		}

		# Remove some python-logger fields that are irrelevant to us
		mutate {
			#remove_field => [ "bracketlevel", "bracketname", "bracketprocess", "colorlevel", "colormsg", "colorname", "colorprocess", "exc_info_on_loglevel" ]
			#remove_field => [ "headers", "host", "level", "logger_name", "path", "type" ]
			remove_field => [ "headers" ]
		}

		# Split presence events into one event per present minion
		if [message] =~ "salt\/presence\/present" {
			split {
				field => "present"
				add_field => { "[@metadata][type]" => "salt-event" }
				add_field => { "event" => "present" }
			}
			mutate {
				replace => { "[@metadata][beat]" => "saltpresence" }
				rename => { "present" => "minion" }
			}
		}

		# Parse the minion ID and beacon type from beacon events
		if [message] =~ "salt\/beacon\/.*\/[A-Za-z]+\/" {
			mutate {
				add_field => { "event" => "beacon" }
				replace => { "[@metadata][beat]" => "saltbeacon" }
			}
			grok {
				match => { message => "salt/beacon/(?<minion>[0-9A-Za-z_-]+)/(?<beacon>[A-Za-z]+)/" }
			}
		}

		# Split up job sends into an event per target, and parse minion name from returnsn
		if [message] =~ "salt\/job\/[0-9]+\/" {
			mutate {
				# All job events go to the saltjobs collection
				replace => { "[@metadata][beat]" => "saltjobs" }
			}
			if [message] =~ "\/new" {
				# New jobs get split up by minion name
				split {
				  field => "minions"
				}
				mutate {
				  rename => { "minions" => "minion" }
				  add_field => { "event" => "job-send" }
				  add_field => { "[@metadata][beat]" => "saltjobs" }
				  add_field => { "[@metadata][type]" => "salt-event" }
				}
			}
			else if [message] =~ "salt\/job\/[0-9]+\/ret\/" {
				# Job return events have the minion name in the event body
				grok {
					match => { message => "salt/job/[0-9]+/ret/(?<minion>[0-9A-Za-z_-]+)" }
					add_field => { "event" => "job-return" }
				}
				mutate {
					# FIXME: json encoding chokes on the return value
					remove_field => [ "return" ]
				}
			}
			else if [message] =~ "salt\/job\/[0-9]+\/prog\/" {
				# Function progress events have the minion name message only
				grok {
					match => { message => "salt/job/[0-9]+/prog/(?<minion>[0-9A-Za-z_-]+)/" }
					add_field => { "success" => "%{[data][ret][result]}" }
				}
				# Two different messages are received, for function blocks, and whole states
				if [data][ret][name] =~ /.+/ {
					mutate {
						add_field => { "event" => "job-progress-function" }
						add_field => { "fun" => "%{[data][ret][name]}" }
					}
				}
			}
			else if [data][ret][__sls__] =~ /.+/ {
				mutate {
					add_field => { "event" => "job-progress-state" }
					add_field => { "fun" => "%{[data][ret][__sls__]}" }
				}
			}
		}

		# this is not an else-case
		if [message] =~ "syndic\/" {
			# This job was sent to/from a syndicate server
			grok {
				match => { message => "syndic/(?<syndic>[0-9A-Za-z_-]+)/salt/job/" }
			}
		}

		if [event] == "job-return" {
			if [fun] == "event.send" {
				drop {}
			}
		}

		# Convert all minion names to lower-case
		mutate {
			lowercase => [ "minion" ]
		}
	}
}

